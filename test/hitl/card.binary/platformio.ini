; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env]
platform = ststm32
board = bw_swan_r5
framework = arduino
build_flags =
	-std=c++14
	-Wall
	-Werror # ensure unused functions in the test script generate an error
	-D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
	-D UNITY_INCLUDE_PRINT_FORMATTED
	'-D DEFAULT_NOTEHUB_PROXY_ROUTE_ALIAS="cobstest"'
	'-D DEFAULT_PRODUCT_UID=""' # don't set the product UID
lib_deps = blues/Blues Wireless Notecard@^1.6.0
test_framework = unity

; The serial port used for streaming test results from the Swan to the host
; computer takes a second to show up after uploading. This script waits for it
; to show up before running the tests. See https://github.com/platformio/platformio-core/issues/3742.
extra_scripts = post:wait_for_test_port.py

; We need to pass this down to OpenOCD so that it uses the correct ST-LINK.
; In my (Hayden's) HIL setup, there are many ST-LINKs connected to the same
; machine. Simply specifying the serial port corresponding to a given ST-LINK
; via upload_port doesn't work, so we have to use the specific serial number
; of the ST-LINK we're trying to target.
;upload_flags =
;    -c
;    hla_serial 0029000F3156501420323443

[env:debug]
build_type = debug
debug_test = *
upload_protocol = custom
upload_command = ${sysenv.GDB_CMD} -ex "set confirm off" -ex "set pagination off" -ex "file .pio/build/debug/firmware.elf" -ex "target extended-remote ${sysenv.MCU_GDB_SERVER_IP}:${sysenv.MCU_GDB_SERVER_PORT}" -ex "monitor reset halt" -ex "load" -ex "monitor reset" -ex "quit"
test_port = /tmp/ns_mcu_usb
